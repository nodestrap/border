// A class library for making a consistent border in a html element.



@use "~@nodestrap/sass-class-template/src/index" as *;
@use "~@nodestrap/colors/src/index"              as color;



@use    "base"         as base;



@use    "sass:string"  as string;
@use    "sass:list"    as list;
@use    "sass:map"     as map;



/*sub*/$class       : ""                                    !default;
$var-root           : base.$var-root                        !default;
$var-prefix         : ""                                    !default;
$var-prefix-base    : base.$var-prefix                      !default;
$var: make-var($var-prefix, $var-prefix-base);

$color      : var(#{color.$var}dark-transp)                 !default;
$style      : solid                                         !default;

$default    : var(#{$var}hair)                              !default;
$none       : 0px                                           !default;
$hair       : 1px                                           !default;
$thin       : 2px                                           !default;
$bold       : 4px                                           !default;

$sizes      : ()                                            !default;
$sizes: map.merge((
    default : $default,
    none    : $none,
    hair    : $hair,
    thin    : $thin,
    bold    : $bold
), $sizes);



@include declare-vars($var-root) {
    #{$var}color                        : #{$color};
    #{$var}style                        : #{$style};

    @if (map.has-key($sizes, default)) {
        #{string.slice($var, 1, -2)}    : var(#{$var}default) var(#{$var}style) var(#{$var}color);
    }
    @each $name, $value in $sizes {
        #{$var}#{$name}                 : #{$value};
    }
}



@function _is-named($size) {
    @return map.has-key($sizes, $size);
}
@function _value($size) {
    @if (_is-named($size)) {
        @return var(#{$var}#{$size});
    }
    @else {
        @return $size;
    }
}



/* begin: specific style */
@mixin all($size: default) {
    border          : _value($size) var(#{$var}style) var(#{$var}color);
}
@mixin top($size: default) {
    border-top      : _value($size) var(#{$var}style) var(#{$var}color);
}
@mixin bottom($size: default) {
    border-bottom   : _value($size) var(#{$var}style) var(#{$var}color);
}
@mixin left($size: default) {
    border-left     : _value($size) var(#{$var}style) var(#{$var}color);
}
@mixin right($size: default) {
    border-right    : _value($size) var(#{$var}style) var(#{$var}color);
}

@mixin not-top($size: default) {
    @include bottom($size);
    @include left($size);
    @include right($size);
}
@mixin not-bottom($size: default) {
    @include top($size);
    @include left($size);
    @include right($size);
}
@mixin not-left($size: default) {
    @include top($size);
    @include bottom($size);
    @include right($size);
}
@mixin not-right($size: default) {
    @include top($size);
    @include bottom($size);
    @include left($size);
}

@mixin none {
    @include all(none);
}
/* end: specific style */



/* begin: general style */
@mixin style {
    @include base.style;


    @include all;
}
/* end: general style */



// utility class => no emit class
// @include class($class, base.$class) { @include style; }