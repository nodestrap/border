// A class library for making a consistent border in a html element.



@use "~@nodestrap/sass-class-template/src/index" as *;
@use "~@nodestrap/colors/src/index"              as color;



@use    "base"         as base;



@use    "sass:string"  as string;
@use    "sass:list"    as list;
@use    "sass:map"     as map;



$alias              : "%border-stroke"                      !default;
/*sub*/$class       : ""                                    !default;
$var-root           : base.$var-root                        !default;
$var-prefix         : ""                                    !default;
$var-prefix-base    : base.$var-prefix                      !default;
$cssvar: make-cssvar($var-prefix, $var-prefix-base);

$color      : var(#{color.$cssvar}dark-transp)              !default;
$style      : solid                                         !default;

$default    : var(#{$cssvar}hair)                           !default;
$none       : 0px                                           !default;
$hair       : 1px                                           !default;
$thin       : 2px                                           !default;
$bold       : 4px                                           !default;

$sizes      : ()                                            !default;
$sizes: map.merge((
    default : $default,
    none    : $none,
    hair    : $hair,
    thin    : $thin,
    bold    : $bold
), $sizes);



@include declare-cssvar($var-root) {
    #{$cssvar}color                     : #{$color};
    #{$cssvar}style                     : #{$style};

    @if (map.has-key($sizes, default)) {
        #{string.slice($cssvar, 1, -2)} : var(#{$cssvar}default);
    }
    @each $name, $value in $sizes {
        #{$cssvar}#{$name} : #{$value};
    }
}



@function _is-named($size) {
    @return map.has-key($sizes, $size);
}
@function _value($size) {
    @if (_is-named($size)) {
        @return var(#{$cssvar}#{$size});
    }
    @else {
        @return $size;
    }
}



/* begin: public mixins */
@mixin all($size: default) {
    border          : _value($size) var(#{$cssvar}style) var(#{$cssvar}color);
}
@mixin top($size: default) {
    border-top      : _value($size) var(#{$cssvar}style) var(#{$cssvar}color);
}
@mixin bottom($size: default) {
    border-bottom   : _value($size) var(#{$cssvar}style) var(#{$cssvar}color);
}
@mixin left($size: default) {
    border-left     : _value($size) var(#{$cssvar}style) var(#{$cssvar}color);
}
@mixin right($size: default) {
    border-right    : _value($size) var(#{$cssvar}style) var(#{$cssvar}color);
}

@mixin not-top($size: default) {
    @include bottom($size);
    @include left($size);
    @include right($size);
}
@mixin not-bottom($size: default) {
    @include top($size);
    @include left($size);
    @include right($size);
}
@mixin not-left($size: default) {
    @include top($size);
    @include bottom($size);
    @include right($size);
}
@mixin not-right($size: default) {
    @include top($size);
    @include bottom($size);
    @include left($size);
}

@mixin none {
    @include all(none);
}
/* end: public mixins */



/* begin: division class */
$locations: (all, top, bottom, left, right, not-top, not-bottom, not-left, not-right, none);
@mixin _style-of($location, $include) {
    @if (list.index($locations, $location) == null) { @error "#{$location} is not valid."; }
    


    @if      ($location == all)         { @include all; }

    @else if ($location == top)         { @include top; }
    @else if ($location == bottom)      { @include bottom; }
    @else if ($location == left)        { @include left; }
    @else if ($location == right)       { @include right; }

    @else if ($location == not-top)     { @include not-top; }
    @else if ($location == not-bottom)  { @include not-bottom; }
    @else if ($location == not-left)    { @include not-left; }
    @else if ($location == not-right)   { @include not-right; }

    @else if ($location == none)        { @include none; }
}
@mixin style-of($location) {
    @include _style-of($location, true);
}
@each $sub in $locations {
    @include alias-of($alias, $sub) {
        @include _style-of($sub, false);
    }


    // utility class => no emit class
    // @include class(part-combine($alias, $sub), "#{$class}-#{$sub}", base.$class);
}
/* end: division class */



/* begin: general style */
@mixin _style($include) {
    @if ($include) { @include base.style; }
    @else          { @extend #{base.$alias} !optional; }


    @if ($include) { @include all; }
    @else          { @extend #{$alias}-all !optional; }
}
@mixin style {
    @include _style(true);
}
@include alias($alias) {
    @include _style(false);
}
/* end: general style */



// utility class => no emit class
// @include class($alias, $class, base.$class);