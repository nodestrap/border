// A class library for making a consistent radius in a html element.



@use "~@nodestrap/sass-class-template/src/index" as *;



@use    "base"         as base;



@use    "sass:string"  as string;
@use    "sass:list"    as list;
@use    "sass:map"     as map;



$alias              : "%border-radius"                      !default;
/*sub*/$class       : "-radius"                             !default;
$var-root           : base.$var-root                        !default;
$var-prefix         : "radius"                              !default;
$var-prefix-base    : base.$var-prefix                      !default;
$cssvar: make-cssvar($var-prefix, $var-prefix-base);

$default    : var(#{$cssvar}md)                             !default;
$none       : 0px                                           !default;
$sm         : 0.2rem                                        !default;
$md         : 0.25rem                                       !default;
$lg         : 0.3rem                                        !default;
$pill       : 50rem                                         !default;
$circle     : 50%                                           !default;

$sizes      : ()                                            !default;
$sizes: map.merge((
    default : $default,
    none    : $none,
    sm      : $sm,
    md      : $md,
    lg      : $lg,
    pill    : $pill,
    circle  : $circle
), $sizes);



@include declare-cssvar($var-root) {
    @if (map.has-key($sizes, default)) {
        #{string.slice($cssvar, 1, -2)} : var(#{$cssvar}default);
    }
    @each $name, $value in $sizes {
        #{$cssvar}#{$name} : #{$value};
    }
}



@function _is-named($size) {
    @return map.has-key($sizes, $size);
}
@function _value($size) {
    @if (_is-named($size)) {
        @return var(#{$cssvar}#{$size});
    }
    @else {
        @return $size;
    }
}



/* begin: public mixins */
@mixin all($size: default) {
    border-radius               : _value($size);
}
@mixin top($size: default) {
    border-top-left-radius      : _value($size);
    border-top-right-radius     : _value($size);
}
@mixin bottom($size: default) {
    border-bottom-left-radius   : _value($size);
    border-bottom-right-radius  : _value($size);
}
@mixin left($size: default) {
    border-top-left-radius      : _value($size);
    border-bottom-left-radius   : _value($size);
}
@mixin right($size: default) {
    border-top-right-radius     : _value($size);
    border-bottom-right-radius  : _value($size);
}

@mixin top-left($size: default) {
    border-top-left-radius      : _value($size);
}
@mixin top-right($size: default) {
    border-top-right-radius     : _value($size);
}

@mixin bottom-left($size: default) {
    border-bottom-left-radius   : _value($size);
}
@mixin bottom-right($size: default) {
    border-bottom-right-radius  : _value($size);
}

@mixin none {
    @include all(none);
}
/* end: public mixins */


/* begin: division class */
$locations: (all, top, bottom, left, right, top-left, top-right, bottom-left, bottom-right, none);
@mixin _style-of($location, $include) {
    @if (list.index($locations, $location) == null) { @error "#{$location} is not valid."; }
    


    @if      ($location == all)             { @include all; }

    @else if ($location == top)             { @include top; }
    @else if ($location == bottom)          { @include bottom; }
    @else if ($location == left)            { @include left; }
    @else if ($location == right)           { @include right; }

    @else if ($location == top-left)        { @include top-left; }
    @else if ($location == top-right)       { @include top-right; }
    @else if ($location == bottom-left)     { @include bottom-left; }
    @else if ($location == bottom-right)    { @include bottom-right; }

    @else if ($location == none)            { @include none; }
}
@mixin style-of($location) {
    @include _style-of($location, true);
}
@each $sub in $locations {
    @include alias-of($alias, $sub) {
        @include _style-of($sub, false);
    }


    // utility class => no emit class
    // @include class(part-combine($alias, $sub), "#{$class}-#{$sub}", base.$class);
}
/* end: division class */



/* begin: general style */
@mixin _style($include) {
    @if ($include) { @include base.style; }
    @else          { @extend #{base.$alias} !optional; }


    @if ($include) { @include all; }
    @else          { @extend #{$alias}-all !optional; }
}
@mixin style {
    @include _style(true);
}
@include alias($alias) {
    @include _style(false);
}
/* end: general style */



// utility class => no emit class
// @include class($alias, $class, base.$class);