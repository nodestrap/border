// A class library for making a consistent radius in a html element.



@use "~@nodestrap/sass-class-template/src/index" as *;



@use    "base"         as base;



@use    "sass:string"  as string;
@use    "sass:list"    as list;
@use    "sass:map"     as map;



/*sub*/$class       : "-radius"                             !default;
$var-root           : base.$var-root                        !default;
$var-prefix         : "radius"                              !default;
$var-prefix-base    : base.$var-prefix                      !default;
$var: make-var($var-prefix, $var-prefix-base);

$default    : var(#{$var}md)                                !default;
$none       : 0px                                           !default;
$sm         : 0.2rem                                        !default;
$md         : 0.25rem                                       !default;
$lg         : 0.3rem                                        !default;
$pill       : 50rem                                         !default;
$circle     : 50%                                           !default;

$sizes      : ()                                            !default;
$sizes: map.merge((
    default : $default,
    none    : $none,
    sm      : $sm,
    md      : $md,
    lg      : $lg,
    pill    : $pill,
    circle  : $circle
), $sizes);



@include declare-vars($var-root) {
    @if (map.has-key($sizes, default)) {
        #{string.slice($var, 1, -2)}    : var(#{$var}default);
    }
    @each $name, $value in $sizes {
        #{$var}#{$name}                 : #{$value};
    }
}



@function _is-named($size) {
    @return map.has-key($sizes, $size);
}
@function _value($size) {
    @if (_is-named($size)) {
        @return var(#{$var}#{$size});
    }
    @else {
        @return $size;
    }
}



/* begin: specific style */
@mixin all($size: default) {
    border-radius               : _value($size);
}
@mixin top($size: default) {
    border-top-left-radius      : _value($size);
    border-top-right-radius     : _value($size);
}
@mixin bottom($size: default) {
    border-bottom-left-radius   : _value($size);
    border-bottom-right-radius  : _value($size);
}
@mixin left($size: default) {
    border-top-left-radius      : _value($size);
    border-bottom-left-radius   : _value($size);
}
@mixin right($size: default) {
    border-top-right-radius     : _value($size);
    border-bottom-right-radius  : _value($size);
}

@mixin top-left($size: default) {
    border-top-left-radius      : _value($size);
}
@mixin top-right($size: default) {
    border-top-right-radius     : _value($size);
}

@mixin bottom-left($size: default) {
    border-bottom-left-radius   : _value($size);
}
@mixin bottom-right($size: default) {
    border-bottom-right-radius  : _value($size);
}

@mixin none {
    @include all(none);
}
/* end: specific style */



/* begin: general style */
@mixin style {
    @include base.style;


    @include all;
}
/* end: general style */



// utility class => no emit class
// @include class($class, base.$class) { @include style; }